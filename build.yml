default: site

extends:
- c4s4/build/buildir.yml

properties:
  VENV_DIR:    'venv'
  ARTICLE_DIR: 'content/article'
  RESUME_DIR:  'content/resume'
  DESTINATION: '/home/web/sweetohm'
  PANDOC_FILTERS:
    '8': '1.2.4'
    '9': '1.4.2'
  CV_DESTS:
  - 'casa@sweetohm.net:/home/web/public'
  #- 'casa@sweetohm.org:/home/web/public'

environment:
  PATH:       '={VENV_DIR}/bin:${PATH}'

targets:

  init:
    doc: Create virtual environment
    steps:
    - delete: =VENV_DIR
    - $: ['virtualenv', =VENV_DIR]
    - 'debian = split(read("/etc/debian_version"), ".")[0]'
    - if: PANDOC_FILTERS[debian] == nil
      then:
      - throw: 'No pandocfilters version defined for Debian ={debian}'
    - 'version = PANDOC_FILTERS[debian]'
    - $: ['={VENV_DIR}/bin/pip', 'install', 'pandocfilters==={version}']

  pdf:
    doc: Generate PDF files
    steps:
    - mkdir: '={BUILD_DIR}/pdf'
    - for: dir
      in:  [=ARTICLE_DIR, =RESUME_DIR]
      do:
      - for: file
        in:  'find(dir, "*.md")'
        do:
        - 'md = joinpath(dir, file)'
        - 'pdf = joinpath(BUILD_DIR, "pdf", file[0:len(file)-3]+".pdf")'
        - if: 'older(md, pdf)'
          then:
          - print: 'Generating "={pdf}"'
          - $: ['md2pdf', '-i', =dir, '-o', =pdf, =md]

  epub:
    doc: Generate Epub files
    steps:
    - mkdir: '={BUILD_DIR}/epub'
    - for: file
      in:  'find(ARTICLE_DIR, "*.md")'
      do:
      - 'md = joinpath(ARTICLE_DIR, file)'
      - 'epub = joinpath(BUILD_DIR, "epub", file[0:len(file)-3]+".epub")'
      - if: 'older(md, epub)'
        then:
        - print: 'Generating "={epub}"'
        - $: ['pandoc', '-t', 'epub', '-o', =epub, '--filter', './image_dir.py', =md]

  docx:
    doc: Generate Docx files
    steps:
    - mkdir: '={BUILD_DIR}/docx'
    - for: file
      in:  'find(RESUME_DIR, "*.md")'
      do:
      - 'md = joinpath(RESUME_DIR, file)'
      - 'docx = joinpath(BUILD_DIR, "docx", file[0:len(file)-3]+".docx")'
      - if: 'older(md, docx)'
        then:
        - print: 'Generating "={docx}"'
        - $: ['pandoc', '-t', 'docx', '-o', =docx, '--filter', './image_dir.py', =md]

  site:
    doc: Generate static site
    depends: [pdf, epub, docx]
    steps:
    - $: ['hugo', '-d', =BUILD_DIR]

  sync:
    doc: Synchronize website
    steps:
    - $: ['rsync', '-av', '={BUILD_DIR}/', '={DESTINATION}/']

  update:
    doc: Update site if changed on remote master
    steps:
    - print: 'Update at ={now()}'
    - $: ['git', 'fetch']
    - $: ['git', 'rev-parse', 'origin/master']
      =:  'master'
    - $: ['git', 'rev-parse', 'HEAD']
      =:  'local'
    - if: 'local != master'
      then:
      - $: ['git', 'pull']
      - $: ['neon', 'site', 'sync']

  server:
    doc: Run development server
    steps:
    - $: ['hugo', 'server', '-d', =BUILD_DIR, '--watch']

  cv:
    doc: Generate resume
    depends: clean
    steps:
    - 'CV_DIR = joinpath(BUILD_DIR, "michel-casabianca")'
    - mkdir: =CV_DIR
    - for: file
      in:  'find("content/resume", "*.md")'
      do:
      - 'base = file[0:len(file)-3]'
      - $: ['md2pdf', '-o', '={CV_DIR}/={base}.pdf', 'content/resume/={file}']
      - $: ['pandoc', '-t', 'docx', '-o', '={CV_DIR}/={base}.docx', 'content/resume/={file}']
    - for: dest
      in:  CV_DESTS
      do:
      - $: 'scp ={CV_DIR}/* ={dest}/../public/'
    - zip:     '*'
      dir:     =CV_DIR
      exclude: '*.en.*'
      prefix:  'michel-casabianca'
      tofile:  '~/dsk/michel-casabianca.zip'

  release:
    doc: Perform a release
    steps:
    # check that there are no uncommitted changes
    - try:
      - $: ['git', 'diff', '--quiet', '--exit-code', 'HEAD']
      - print: 'There are no uncommitted changes'
      catch:
      - throw: 'There are uncommitted changes'
    # check that we are on develop branch
    - $: ['git', 'rev-parse', '--abbrev-ref', 'HEAD']
      =: 'branch'
    - if: 'branch != "develop"'
      then:
      - throw: 'We are not on branch develop'
      else:
      - print: 'We are on branch develop'
    # generate release tag and message
    - 'strings = import("strings")'
    - 'tag = strings.Replace(now(), " ", "=", -1)'
    - 'tag = strings.Replace(tag, ":", "-", -1)'
    - 'message = "Release on "+now()'
    # merge develop on master, tag release and return on develop
    - try:
      - $: ['git', 'checkout', 'master']
      - $: ['git', 'pull']
      - $: ['git', 'merge', '--no-ff', 'develop', '-m', =message]
      - $: ['git', 'push']
      - $: ['git', 'tag', '-a', =tag, '-m', =message]
      - $: ['git', 'push', 'origin', =tag]
      catch:
      - throw: 'performing release'
      finally:
      # whatever happens, when return on develop branch
      - $: ['git', 'checkout', 'develop']
